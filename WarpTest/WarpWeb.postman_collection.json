{
	"info": {
		"_postman_id": "74a1db05-e3db-41bb-96ea-536e991f4eea",
		"name": "WarpWeb",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\",\r",
									"    function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    }\r",
									");\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"token\", \"Bearer \" + jsonData.token);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "content-type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userName\": \"postmanwarpweb@gmail.com\",\r\n    \"password\": \"SuperHemmelig\"\r\n}\r\n"
						},
						"url": {
							"raw": "{{apiUrl}}/auth/login",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get current user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\",\r",
									"    function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    }\r",
									");\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"currentUserId\", jsonData.id);\r",
									"pm.environment.set(\"currentUserName\", jsonData.firstName + \" \" + jsonData.lastName);\r",
									"pm.environment.set(\"currentUserPhoneNumber\", jsonData.phoneNumber);\r",
									"pm.environment.set(\"currentUserEMail\", jsonData.eMail);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{apiUrl}}/users/currentuser",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"users",
								"currentuser"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "MainEvent Happy Path Scenarios",
			"item": [
				{
					"name": "Create organizer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\",\r",
									"    function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    }\r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"timeStamp\", Date.now());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json-patch+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{organizerName}}{{timeStamp}}\",\r\n  \"orgNumber\": \"9{{timeStamp}}\"\r\n}"
						},
						"url": {
							"raw": "{{apiUrl}}/tenants/addorganizer",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"tenants",
								"addorganizer"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all organizers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\",\r",
									"    function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    }\r",
									");\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"var organizer = _.find(pm.response.json(), { \r",
									"    name: pm.variables.get(\"organizerName\") + pm.variables.get(\"timeStamp\")\r",
									"});\r",
									"pm.environment.set(\"organizerId\", organizer.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{apiUrl}}/tenants/gettenants",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"tenants",
								"gettenants"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get organizer administrators",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\",\r",
									"    function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    }\r",
									");\r",
									"\r",
									"pm.test(\r",
									"    \"Organizer has no admin\",\r",
									"    function () {\r",
									"        var jsonData = JSON.parse(responseBody);\r",
									"        pm.expect(jsonData).to.empty;\r",
									"    }\r",
									");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{apiUrl}}/tenants/getadmins/{{organizerId}}",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"tenants",
								"getadmins",
								"{{organizerId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Set orgadmin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\",\r",
									"    function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    }\r",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json-patch+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\"{{currentUserId}}\""
						},
						"url": {
							"raw": "{{apiUrl}}/tenants/setadmin/{{organizerId}}",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"tenants",
								"setadmin",
								"{{organizerId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create venue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\",\r",
									"    function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    }\r",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json-patch+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"organizerId\": {{organizerId}},\r\n  \"name\": \"{{venueName}}{{timeStamp}}\"\r\n}"
						},
						"url": {
							"raw": "{{apiUrl}}/venues/createvenue",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"venues",
								"createvenue"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all venues",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\",\r",
									"    function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    }\r",
									");\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"var venue = _.find(pm.response.json(), { \r",
									"    name: pm.variables.get(\"venueName\") + pm.variables.get(\"timeStamp\")\r",
									"});\r",
									"pm.environment.set(\"venueId\", venue.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{apiUrl}}/venues/venueslist",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"venues",
								"venueslist"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\",\r",
									"    function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    }\r",
									");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json-patch+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{mainEventName}}{{timeStamp}}\",\r\n  \"startDateTime\": \"2021-05-17T14:55:08.616Z\",\r\n  \"endDateTime\": \"2021-05-17T14:55:08.616Z\",\r\n  \"venueId\": \"{{venueId}}\",\r\n  \"organizerId\": \"{{organizerId}}\"\r\n}"
						},
						"url": {
							"raw": "{{apiUrl}}/events/createmainevent",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"events",
								"createmainevent"
							]
						}
					},
					"response": []
				},
				{
					"name": "Refresh token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\",\r",
									"    function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    }\r",
									");\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"token\", \"Bearer \" + jsonData.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{apiUrl}}/auth/refreshtoken",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"auth",
								"refreshtoken"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get current main event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\",\r",
									"    function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    }\r",
									");\r",
									"\r",
									"pm.test(\r",
									"    \"New event is now current main event\",\r",
									"    function () {\r",
									"        var jsonData = JSON.parse(responseBody);\r",
									"        pm.expect(jsonData.name).to.equal(pm.variables.get(\"mainEventName\") + pm.variables.get(\"timeStamp\"));\r",
									"    }\r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{apiUrl}}/events/getcurrentmainevent",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"events",
								"getcurrentmainevent"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all events",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\",\r",
									"    function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    }\r",
									");\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"var event = _.find(pm.response.json(), { \r",
									"    name: pm.variables.get(\"mainEventName\") + pm.variables.get(\"timeStamp\")\r",
									"});\r",
									"pm.environment.set(\"mainEventId\", event.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{apiUrl}}/events/eventslist",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"events",
								"eventslist"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get upcoming events",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\",\r",
									"    function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    }\r",
									");\r",
									"\r",
									"pm.test(\r",
									"    \"Upcoming events should not contain this event\",\r",
									"    function () {\r",
									"        var event = _.find(pm.response.json(), { \r",
									"            id: pm.variables.get(\"mainEventId\")\r",
									"        });\r",
									"        pm.expect(event).not.exist;\r",
									"    }\r",
									");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{apiUrl}}/events/upcomingevents",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"events",
								"upcomingevents"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\",\r",
									"    function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    }\r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									" pm.environment.set(\"nextYear\", (new Date().getFullYear())+1);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json-patch+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": {{mainEventId}},\r\n  \"name\": \"{{mainEventNameUpdated}}{{timeStamp}}\",\r\n  \"organizerId\": {{organizerId}}, \r\n  \"startDateTime\": \"{{nextYear}}-05-18T14:55:08.616Z\",\r\n  \"endDateTime\": \"{{nextYear}}-05-18T14:55:08.616Z\"\r\n}"
						},
						"url": {
							"raw": "{{apiUrl}}/events",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"events"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get upcoming events again",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\",\r",
									"    function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    }\r",
									");\r",
									"\r",
									"pm.test(\r",
									"    \"Upcoming events should contain this event\",\r",
									"    function () {\r",
									"        var event = _.find(pm.response.json(), { \r",
									"            id: pm.variables.get(\"mainEventId\")\r",
									"        });\r",
									"        pm.expect(event).exist;\r",
									"    }\r",
									");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{apiUrl}}/events/upcomingevents",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"events",
								"upcomingevents"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\",\r",
									"    function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    }\r",
									");\r",
									"\r",
									"pm.test(\r",
									"    \"Name has been updated\",\r",
									"    function () {\r",
									"        var jsonData = JSON.parse(responseBody);\r",
									"        pm.expect(jsonData.name).to.equal(pm.variables.get(\"mainEventNameUpdated\") + pm.variables.get(\"timeStamp\"));\r",
									"    }\r",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{apiUrl}}/events/getmainevent/{{mainEventId}}",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"events",
								"getmainevent",
								"{{mainEventId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get events where current user is orgadmin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\",\r",
									"    function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    }\r",
									");\r",
									"\r",
									"pm.test(\r",
									"    \"Current user is orgadmin in current main event\",\r",
									"    function () {\r",
									"        var event = _.find(pm.response.json(), { \r",
									"            id: pm.variables.get(\"mainEventId\")\r",
									"        });\r",
									"        pm.expect(event).exist;\r",
									"    }\r",
									");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{apiUrl}}/events/orgadminmainevents",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"events",
								"orgadminmainevents"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Crew Happy Path Scenarios",
			"item": [
				{
					"name": "Set main event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\",\r",
									"    function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    }\r",
									");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json-patch+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{mainEventId}}"
						},
						"url": {
							"raw": "{{apiUrl}}/events/setcurrentevent",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"events",
								"setcurrentevent"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create crew",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\",\r",
									"    function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    }\r",
									");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{apiUrl}}/crews/createcrew/{{crewName}}",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"crews",
								"createcrew",
								"{{crewName}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all crews",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\",\r",
									"    function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    }\r",
									");\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"var crew = _.find(pm.response.json(), { \r",
									"    name: pm.variables.get(\"crewName\")\r",
									"});\r",
									"pm.environment.set(\"crewId\", crew.id);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{apiUrl}}/crews/allcrews",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"crews",
								"allcrews"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update crew",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\",\r",
									"    function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    }\r",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json-patch+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"crewId\": {{crewId}},\r\n  \"crewName\": \"{{crewNameUpdated}}\"\r\n}"
						},
						"url": {
							"raw": "{{apiUrl}}/crews/updatecrew",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"crews",
								"updatecrew"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get crew",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\",\r",
									"    function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    }\r",
									");\r",
									"\r",
									"pm.test(\r",
									"    \"Name has been updated\",\r",
									"    function () {\r",
									"        var jsonData = JSON.parse(responseBody);\r",
									"        pm.expect(jsonData.crewName).to.equal(pm.variables.get(\"crewNameUpdated\"));\r",
									"    }\r",
									");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{apiUrl}}/crews/getcrew/{{crewId}}",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"crews",
								"getcrew",
								"{{crewId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get crew members",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\",\r",
									"    function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    }\r",
									");\r",
									"\r",
									"pm.test(\r",
									"    \"Crewmember array is empty\",\r",
									"    function () {\r",
									"        var jsonData = JSON.parse(responseBody);\r",
									"        pm.expect(jsonData.length).to.equal(0);\r",
									"    }\r",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{apiUrl}}/crews/crewmembers/{{crewId}}",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"crews",
								"crewmembers",
								"{{crewId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add crew member",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\",\r",
									"    function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    }\r",
									");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json-patch+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\"{{currentUserId}}\""
						},
						"url": {
							"raw": "{{apiUrl}}/crews/addcrewmember/{{crewId}}",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"crews",
								"addcrewmember",
								"{{crewId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get crew members again",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\",\r",
									"    function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    }\r",
									");\r",
									"\r",
									"pm.test(\r",
									"    \"Crewmember array contains current user\",\r",
									"    function () {\r",
									"        var jsonData = JSON.parse(responseBody);\r",
									"        pm.expect(jsonData.length).to.equal(1);\r",
									"        pm.expect(jsonData[0].id).to.equal(pm.variables.get(\"currentUserId\"));\r",
									"    }\r",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{apiUrl}}/crews/crewmembers/{{crewId}}",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"crews",
								"crewmembers",
								"{{crewId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get crews of the current user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\",\r",
									"    function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    }\r",
									");\r",
									"\r",
									"pm.test(\r",
									"    \"Crew list contains crewId\",\r",
									"    function () {\r",
									"        var crew = _.find(pm.response.json(), { \r",
									"            id: pm.variables.get(\"crewId\")\r",
									"        });\r",
									"        pm.expect(crew).exist;\r",
									"    }\r",
									");\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{apiUrl}}/crews/mycrews",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"crews",
								"mycrews"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check user crew member at event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\",\r",
									"    function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    }\r",
									");\r",
									"\r",
									"pm.test(\r",
									"    \"User is a member of the event\",\r",
									"    function () {\r",
									"        pm.expect(responseBody).to.equal(\"true\");\r",
									"    }\r",
									");\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json-patch+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"eventId\": {{mainEventId}}\r\n}"
						},
						"url": {
							"raw": "{{apiUrl}}/crews/checkusercrewmemberatevent",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"crews",
								"checkusercrewmemberatevent"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove crew member",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\",\r",
									"    function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    }\r",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json-patch+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userId\": \"{{currentUserId}}\",\r\n  \"crewId\": {{crewId}}\r\n}"
						},
						"url": {
							"raw": "{{apiUrl}}/crews/removecrewmember",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"crews",
								"removecrewmember"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get crew members after removing user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\",\r",
									"    function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    }\r",
									");\r",
									"\r",
									"pm.test(\r",
									"    \"Crewmember array is empty\",\r",
									"    function () {\r",
									"        var jsonData = JSON.parse(responseBody);\r",
									"        pm.expect(jsonData.length).to.equal(0);\r",
									"    }\r",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{apiUrl}}/crews/crewmembers/{{crewId}}",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"crews",
								"crewmembers",
								"{{crewId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get crew leaders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\",\r",
									"    function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    }\r",
									");\r",
									"\r",
									"pm.test(\r",
									"    \"Crewleader array is empty\",\r",
									"    function () {\r",
									"        var jsonData = JSON.parse(responseBody);\r",
									"        pm.expect(jsonData.length).to.equal(0);\r",
									"    }\r",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{apiUrl}}/crews/crewleaders/{{crewId}}",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"crews",
								"crewleaders",
								"{{crewId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add crew leader",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\",\r",
									"    function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    }\r",
									");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json-patch+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\"{{currentUserId}}\""
						},
						"url": {
							"raw": "{{apiUrl}}/crews/addcrewleader/{{crewId}}",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"crews",
								"addcrewleader",
								"{{crewId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get crew leaders again",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\",\r",
									"    function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    }\r",
									");\r",
									"\r",
									"pm.test(\r",
									"    \"Crewleader array contains current user\",\r",
									"    function () {\r",
									"        var jsonData = JSON.parse(responseBody);\r",
									"        pm.expect(jsonData.length).to.equal(1);\r",
									"        pm.expect(jsonData[0].id).to.equal(pm.variables.get(\"currentUserId\"));\r",
									"    }\r",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{apiUrl}}/crews/crewleaders/{{crewId}}",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"crews",
								"crewleaders",
								"{{crewId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Set admin rights",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\",\r",
									"    function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    }\r",
									");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json-patch+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\"name\": \"CheckInAdmin\", \"value\": 0, \"crewHasPermission\": true},\r\n    {\"name\": \"CrewAdmin\", \"value\": 1, \"crewHasPermission\": true},\r\n    {\"name\": \"ParticipantAdmin\", \"value\": 7, \"crewHasPermission\": true},\r\n    {\"name\": \"ReportAdmin\", \"value\": 5, \"crewHasPermission\": true},\r\n    {\"name\": \"SeatMapAdmin\", \"value\": 3, \"crewHasPermission\": true},\r\n    {\"name\": \"UserAdmin\", \"value\": 4, \"crewHasPermission\": true},\r\n    {\"name\": \"VenueAdmin\", \"value\": 6, \"crewHasPermission\": true},\r\n    {\"name\": \"TicketAdmin\", \"value\": 2, \"crewHasPermission\": true}\r\n]"
						},
						"url": {
							"raw": "{{apiUrl}}/security/setpolicies/{{crewId}}",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"security",
								"setpolicies",
								"{{crewId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get crew permissions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\",\r",
									"    function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    }\r",
									");\r",
									"\r",
									"pm.test(\r",
									"    \"Crew has all rights\",\r",
									"    function () {\r",
									"        var jsonData = JSON.parse(responseBody);\r",
									"        pm.expect(jsonData[0].crewHasPermission).to.equal(true);\r",
									"        pm.expect(jsonData[1].crewHasPermission).to.equal(true);\r",
									"        pm.expect(jsonData[2].crewHasPermission).to.equal(true);\r",
									"        pm.expect(jsonData[3].crewHasPermission).to.equal(true);\r",
									"        pm.expect(jsonData[4].crewHasPermission).to.equal(true);\r",
									"        pm.expect(jsonData[5].crewHasPermission).to.equal(true);\r",
									"        pm.expect(jsonData[6].crewHasPermission).to.equal(true);\r",
									"        pm.expect(jsonData[7].crewHasPermission).to.equal(true);\r",
									"        }\r",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{apiUrl}}/security/allpolicies/{{crewId}}",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"security",
								"allpolicies",
								"{{crewId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete crew",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\",\r",
									"    function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    }\r",
									");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json-patch+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"CrewId\": {{crewId}}\r\n}"
						},
						"url": {
							"raw": "{{apiUrl}}/crews/deletecrew",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"crews",
								"deletecrew"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Organizer Happy Path Scenarios",
			"item": [
				{
					"name": "Update organizer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\",\r",
									"    function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    }\r",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json-patch+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": {{organizerId}},\r\n  \"name\": \"{{organizerNameUpdated}}\",\r\n  \"orgNumber\": \"9{{timeStamp}}\"\r\n}"
						},
						"url": {
							"raw": "{{apiUrl}}/tenants/updateorganizer",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"tenants",
								"updateorganizer"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get organizer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\",\r",
									"    function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    }\r",
									");\r",
									"\r",
									"pm.test(\r",
									"    \"Name has been updated\",\r",
									"    function () {\r",
									"        var jsonData = JSON.parse(responseBody);\r",
									"        pm.expect(jsonData.name).to.equal(pm.variables.get(\"organizerNameUpdated\"));\r",
									"    }\r",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{apiUrl}}/tenants/getorganizer/{{organizerId}}",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"tenants",
								"getorganizer",
								"{{organizerId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get contact person of the organizer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\",\r",
									"    function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    }\r",
									");\r",
									"\r",
									"pm.test(\r",
									"    \"Organizer does not have any contact persons\",\r",
									"    function () {\r",
									"        var jsonData = JSON.parse(responseBody);\r",
									"        pm.expect(jsonData[0].contactName).to.equal(\" \");\r",
									"        pm.expect(jsonData[0].contactPhone).to.equal(null);\r",
									"        pm.expect(jsonData[0].contactMail).to.equal(null);\r",
									"    }\r",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{apiUrl}}/tenants/getcontact/{{organizerId}}",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"tenants",
								"getcontact",
								"{{organizerId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Set contact person for organizer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\",\r",
									"    function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    }\r",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json-patch+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\"{{currentUserId}}\""
						},
						"url": {
							"raw": "{{apiUrl}}/tenants/setorgcontact/{{organizerId}}",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"tenants",
								"setorgcontact",
								"{{organizerId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get contact person of the organizer again",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\",\r",
									"    function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    }\r",
									");\r",
									"\r",
									"pm.test(\r",
									"    \"Current user is now contact person for the organizer\",\r",
									"    function () {\r",
									"        var jsonData = JSON.parse(responseBody);\r",
									"        pm.expect(jsonData[0].contactName).to.equal(pm.variables.get(\"currentUserName\"));\r",
									"        pm.expect(jsonData[0].contactPhone).to.equal(pm.variables.get(\"currentUserPhoneNumber\"));\r",
									"        pm.expect(jsonData[0].contactMail).to.equal(pm.variables.get(\"currentUserEMail\"));\r",
									"    }\r",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{apiUrl}}/tenants/getcontact/{{organizerId}}",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"tenants",
								"getcontact",
								"{{organizerId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get organizer administrators",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\",\r",
									"    function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    }\r",
									");\r",
									"\r",
									"pm.test(\r",
									"    \"Current user is administrator\",\r",
									"    function () {\r",
									"        var jsonData = JSON.parse(responseBody);\r",
									"        pm.expect(jsonData[0].id).to.equal(pm.variables.get(\"currentUserId\"));\r",
									"        pm.expect(jsonData[0].name).to.equal(pm.variables.get(\"currentUserName\"));\r",
									"        pm.expect(jsonData[0].phoneNumber).to.equal(pm.variables.get(\"currentUserPhoneNumber\"));\r",
									"        pm.expect(jsonData[0].eMail).to.equal(pm.variables.get(\"currentUserEMail\"));\r",
									"    }\r",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{apiUrl}}/tenants/getadmins/{{organizerId}}",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"tenants",
								"getadmins",
								"{{organizerId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create organizer without admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\",\r",
									"    function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    }\r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json-patch+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{organizerName}}{{timeStamp}}\",\r\n  \"orgNumber\": \"8{{timeStamp}}\"\r\n}"
						},
						"url": {
							"raw": "{{apiUrl}}/tenants/addorganizer",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"tenants",
								"addorganizer"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get organizers where current user is admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\",\r",
									"    function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    }\r",
									");\r",
									"\r",
									"pm.test(\r",
									"    \"Second created organizer does not have current user as admin\",\r",
									"    function () {\r",
									"        var organizer = _.find(pm.response.json(), { \r",
									"            orgNumber: \"8\" + pm.variables.get(\"timeStamp\")\r",
									"        });\r",
									"        pm.expect(organizer).not.exist;      \r",
									"    }\r",
									");\r",
									"\r",
									"pm.test(\r",
									"    \"First created organizer has current user as admin\",\r",
									"    function () {\r",
									"        var organizer = _.find(pm.response.json(), { \r",
									"            orgNumber: \"9\" + pm.variables.get(\"timeStamp\")\r",
									"        });\r",
									"        pm.expect(organizer).exist;      \r",
									"    }\r",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{apiUrl}}/tenants/getaorgsadmin",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"tenants",
								"getaorgsadmin"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove orgadmin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\",\r",
									"    function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    }\r",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json-patch+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\"{{currentUserId}}\"\r\n"
						},
						"url": {
							"raw": "{{apiUrl}}/tenants/removeadmin/{{organizerId}}",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"tenants",
								"removeadmin",
								"{{organizerId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get organizations where current user is admin again",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\",\r",
									"    function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    }\r",
									");\r",
									"\r",
									"pm.test(\r",
									"    \"Second created organizer does not have current user as admin\",\r",
									"    function () {\r",
									"        var organizer = _.find(pm.response.json(), { \r",
									"            orgNumber: \"8\" + pm.variables.get(\"timeStamp\")\r",
									"        });\r",
									"        pm.expect(organizer).not.exist;      \r",
									"    }\r",
									");\r",
									"\r",
									"pm.test(\r",
									"    \"First created organizer does not have current user as admin\",\r",
									"    function () {\r",
									"        var organizer = _.find(pm.response.json(), { \r",
									"            orgNumber: \"9\" + pm.variables.get(\"timeStamp\")\r",
									"        });\r",
									"        pm.expect(organizer).not.exist;      \r",
									"    }\r",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{apiUrl}}/tenants/getaorgsadmin",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"tenants",
								"getaorgsadmin"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Venue Happy Path Scenarois",
			"item": [
				{
					"name": "Update venue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\",\r",
									"    function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    }\r",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json-patch+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"id\": {{venueId}},\r\n \"name\": \"{{venueNameUpdated}}{{timeStamp}}\",\r\n \"organizerId\": {{organizerId}}\r\n}\r\n"
						},
						"url": {
							"raw": "{{apiUrl}}/venues/updatevenue",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"venues",
								"updatevenue"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get venue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\",\r",
									"    function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    }\r",
									");\r",
									"\r",
									"pm.test(\r",
									"    \"Name has been updated\",\r",
									"    function () {\r",
									"        var jsonData = JSON.parse(responseBody);\r",
									"        pm.expect(jsonData.name).to.equal(pm.variables.get(\"venueNameUpdated\") + pm.variables.get(\"timeStamp\"));\r",
									"    }\r",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{apiUrl}}/venues/getvenue/{{venueId}}",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"venues",
								"getvenue",
								"{{venueId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get venues under organizer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\",\r",
									"    function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    }\r",
									");\r",
									"\r",
									"pm.test(\r",
									"    \"Venue is under organizer\",\r",
									"    function () {\r",
									"       var jsonData = JSON.parse(responseBody);\r",
									"        pm.expect(jsonData[0].id).to.equal(pm.variables.get(\"venueId\"));  \r",
									"    }\r",
									");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{apiUrl}}/venues/organizervenueslist",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"venues",
								"organizervenueslist"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Seat Map Happy Path Scenarios",
			"item": [
				{
					"name": "Create ticket type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\",\r",
									"    function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    }\r",
									");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json-patch+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"descriptionName\": \"{{ticketTypeName}}{{timeStamp}}\",\r\n  \"basePrice\": {{ticketTypePrice}},\r\n  \"amountAvailable\": {{ticketTypeAmmountAvailable}}\r\n}"
						},
						"url": {
							"raw": "{{apiUrl}}/tickettypes/createtickettype",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"tickettypes",
								"createtickettype"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all ticket types",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\",\r",
									"    function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    }\r",
									");\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"var ticketType = _.find(pm.response.json(), { \r",
									"    descriptionName: pm.variables.get(\"ticketTypeName\") + pm.variables.get(\"timeStamp\")\r",
									"});\r",
									"pm.environment.set(\"ticketTypeId\", ticketType.id);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{apiUrl}}/tickettypes/tickettypes",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"tickettypes",
								"tickettypes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add seat map",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\",\r",
									"    function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    }\r",
									");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json-patch+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\r\n  {\r\n    \"id\": 0,\r\n    \"rowName\": \"{{rowName}}{{timeStamp}}\",\r\n    \"numberOfSeats\": {{numberOfSeats}},\r\n    \"xPos\": 10,\r\n    \"yPos\": 20,\r\n    \"isVertical\": true,\r\n    \"seats\": [\r\n      {\r\n        \"seatNumber\": 5\r\n      }\r\n    ],\r\n    \"ticketTypeIds\": [\r\n      {{ticketTypeId}}\r\n    ]\r\n  }\r\n]"
						},
						"url": {
							"raw": "{{apiUrl}}/seatmap/storeseatmap",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"seatmap",
								"storeseatmap"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get seatmap",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\",\r",
									"    function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    }\r",
									");\r",
									"\r",
									"pm.test(\r",
									"    \"Get seat maps\",\r",
									"    function () {\r",
									"        var jsonData = JSON.parse(responseBody);\r",
									"        pm.expect(jsonData.length).to.equal(1);\r",
									"        pm.expect(jsonData[0].rowName).to.equal(pm.variables.get(\"rowName\") + pm.variables.get(\"timeStamp\"));\r",
									"        pm.environment.set(\"seatId\", jsonData[0].seats[0].id);\r",
									"    }\r",
									");\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{apiUrl}}/seatmap/getseatmap",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"seatmap",
								"getseatmap"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all tickets",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\",\r",
									"    function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    }\r",
									");\r",
									"\r",
									"pm.test(\r",
									"    \"Array of tickets is empty\",\r",
									"    function () {\r",
									"        var ticket = _.find(pm.response.json(), { \r",
									"            ticketType: pm.variables.get(\"ticketTypeName\")+ pm.variables.get(\"timeStamp\")\r",
									"        });\r",
									"        pm.expect(ticket).not.exist;\r",
									"    }\r",
									");\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{apiUrl}}/tickets",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"tickets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Purchase ticket",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\",\r",
									"    function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    }\r",
									");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json-patch+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\r\n  {\r\n    \"id\": {{ticketTypeId}},\r\n    \"descriptionName\": \"{{ticketTypeName}}\"\r\n  }\r\n]"
						},
						"url": {
							"raw": "{{apiUrl}}/tickets/purchaseticket",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"tickets",
								"purchaseticket"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all tickets again",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\",\r",
									"    function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    }\r",
									");\r",
									"\r",
									"pm.test(\r",
									"    \"There is one ticket in the array\",\r",
									"    function () {\r",
									"        var ticket = _.find(pm.response.json(), {\r",
									"            ticketType: pm.variables.get(\"ticketTypeName\") + pm.variables.get(\"timeStamp\")\r",
									"        });\r",
									"        pm.expect(ticket).exist;\r",
									"        pm.environment.set(\"ticketId\", ticket.id);\r",
									"    }\r",
									");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{apiUrl}}/tickets",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"tickets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reserve seat",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\",\r",
									"    function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    }\r",
									");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json-patch+json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{apiUrl}}/tickets/reserveseat/{{ticketId}}/{{seatId}}",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"tickets",
								"reserveseat",
								"{{ticketId}}",
								"{{seatId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get seatmap for the public",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\",\r",
									"    function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    }\r",
									");\r",
									"\r",
									"pm.test(\r",
									"    \"Get seat map for the public\",\r",
									"    function () {\r",
									"        var jsonData = JSON.parse(responseBody);\r",
									"        pm.expect(jsonData.length).to.equal(1);\r",
									"        pm.expect(jsonData[0].rowName).to.equal(pm.variables.get(\"rowName\") + pm.variables.get(\"timeStamp\"));\r",
									"    }\r",
									");\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{apiUrl}}/seatmap/publicseatmap",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"seatmap",
								"publicseatmap"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Ticket Type Happy Path Scenarios",
			"item": [
				{
					"name": "Update ticket type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\",\r",
									"    function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    }\r",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json-patch+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"id\": {{ticketTypeId}},\r\n \"descriptionName\": \"{{ticketTypeNameUpdated}}{{timeStamp}}\"\r\n}\r\n"
						},
						"url": {
							"raw": "{{apiUrl}}/tickettypes/updatetickettype",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"tickettypes",
								"updatetickettype"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get ticket type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\",\r",
									"    function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    }\r",
									");\r",
									"\r",
									"pm.test(\r",
									"    \"Name has been updated\",\r",
									"    function () {\r",
									"        var jsonData = JSON.parse(responseBody);\r",
									"        pm.expect(jsonData.descriptionName).to.equal(pm.variables.get(\"ticketTypeNameUpdated\") + pm.variables.get(\"timeStamp\"));\r",
									"    }\r",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{apiUrl}}/tickettypes/type/{{ticketTypeId}}",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"tickettypes",
								"type",
								"{{ticketTypeId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get ticket type for active event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\",\r",
									"    function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    }\r",
									");\r",
									"\r",
									"pm.test(\r",
									"    \"There is one ticket type in an array\",\r",
									"    function () {\r",
									"        var ticketType = _.find(pm.response.json(), {\r",
									"            descriptionName: pm.variables.get(\"ticketTypeNameUpdated\") + pm.variables.get(\"timeStamp\")\r",
									"        });\r",
									"        pm.expect(ticketType).exist;\r",
									"    }\r",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{apiUrl}}/tickettypes/eventtickettypes/{{mainEventId}}",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"tickettypes",
								"eventtickettypes",
								"{{mainEventId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete ticket Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\",\r",
									"    function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    }\r",
									");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json-patch+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": {{ticketTypeId}}\r\n}"
						},
						"url": {
							"raw": "{{apiUrl}}/tickettypes/deletetickettype",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"tickettypes",
								"deletetickettype"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Ticket Happy Path Scenarios",
			"item": [
				{
					"name": "Create ticket type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\",\r",
									"    function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    }\r",
									");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json-patch+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"descriptionName\": \"new{{ticketTypeName}}{{timeStamp}}\",\r\n  \"basePrice\": {{ticketTypePrice}},\r\n  \"amountAvailable\": {{ticketTypeAmmountAvailable}}\r\n}"
						},
						"url": {
							"raw": "{{apiUrl}}/tickettypes/createtickettype",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"tickettypes",
								"createtickettype"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all ticket types",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\",\r",
									"    function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    }\r",
									");\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"var ticketType = _.find(pm.response.json(), { \r",
									"    descriptionName: \"new\" + pm.variables.get(\"ticketTypeName\") + pm.variables.get(\"timeStamp\")\r",
									"});\r",
									"pm.environment.set(\"ticketTypeId\", ticketType.id);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{apiUrl}}/tickettypes/tickettypes",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"tickettypes",
								"tickettypes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create ticket",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\",\r",
									"    function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    }\r",
									");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json-patch+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\r\n  {\r\n    \"id\": {{ticketTypeId}},\r\n    \"descriptionName\": \"{{ticketName}}{{timeStamp}}\"\r\n  }\r\n]"
						},
						"url": {
							"raw": "{{apiUrl}}/tickets/createticket",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"tickets",
								"createticket"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all tickets",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\",\r",
									"    function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    }\r",
									");\r",
									"\r",
									"pm.test(\r",
									"    \"Array of tickets contains new ticket\",\r",
									"    function () {\r",
									"        var ticket = _.find(pm.response.json(), { \r",
									"            ticketType: \"new\" + pm.variables.get(\"ticketTypeName\")+ pm.variables.get(\"timeStamp\")\r",
									"        });\r",
									"            pm.expect(ticket).exist;\r",
									"            pm.environment.set(\"ticketId\", ticket.id);\r",
									"    }\r",
									");\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{apiUrl}}/tickets",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"tickets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update ticket",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\",\r",
									"    function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    }\r",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json-patch+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": {{ticketId}},\r\n  \"price\": 500,\r\n  \"ticketTypeId\": {{ticketTypeId}}\r\n}\r\n"
						},
						"url": {
							"raw": "{{apiUrl}}/tickets",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"tickets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get ticket",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\",\r",
									"    function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    }\r",
									");\r",
									"\r",
									"pm.test(\r",
									"    \"Name has been updated\",\r",
									"    function () {\r",
									"        var jsonData = JSON.parse(responseBody);\r",
									"        pm.expect(jsonData.price).to.equal(500);\r",
									"    }\r",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{apiUrl}}/tickets/{{ticketId}}",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"tickets",
								"{{ticketId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all tickets for the specific event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\",\r",
									"    function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    }\r",
									");\r",
									"\r",
									"pm.test(\r",
									"    \"Array of tickets contains new ticket\",\r",
									"    function () {\r",
									"         var jsonData = JSON.parse(responseBody);\r",
									"        pm.expect(jsonData[0].mainEventName).to.equal((pm.variables.get(\"mainEventNameUpdated\") + pm.variables.get(\"timeStamp\")));\r",
									"        pm.expect(jsonData[0].ticketType).to.equal(\"new\" + (pm.variables.get(\"ticketTypeName\") + pm.variables.get(\"timeStamp\")));\r",
									"\r",
									"        }\r",
									");\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{apiUrl}}/tickets/alltickets/{{mainEventId}}",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"tickets",
								"alltickets",
								"{{mainEventId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all tickets of the user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\",\r",
									"    function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    }\r",
									");\r",
									"\r",
									"pm.test(\r",
									"    \"Array of tickets of current user\",\r",
									"    function () {\r",
									"         var ticket = _.find(pm.response.json(), { \r",
									"            ticketType: \"new\" + pm.variables.get(\"ticketTypeName\")+ pm.variables.get(\"timeStamp\")\r",
									"        });\r",
									"            pm.expect(ticket).exist;\r",
									"\r",
									"        }\r",
									");\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{apiUrl}}/tickets/usertickets",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"tickets",
								"usertickets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all tickets of the user for the upcoming events",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\",\r",
									"    function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    }\r",
									");\r",
									"\r",
									"pm.test(\r",
									"    \"Array of tickets of current user for upcoming events\",\r",
									"    function () {\r",
									"         var ticket = _.find(pm.response.json(), { \r",
									"            ticketType: \"new\" + pm.variables.get(\"ticketTypeName\")+ pm.variables.get(\"timeStamp\")\r",
									"        });\r",
									"            pm.expect(ticket).exist;\r",
									"\r",
									"        }\r",
									");\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{apiUrl}}/tickets/userticketsupcoming",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"tickets",
								"userticketsupcoming"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all unpaid tickets",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\",\r",
									"    function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    }\r",
									");\r",
									"\r",
									"pm.test(\r",
									"    \"Array of unpaid tickets\",\r",
									"    function () {\r",
									"        var jsonData = JSON.parse(responseBody);\r",
									"        pm.expect(jsonData[0].mainEventName).to.equal((pm.variables.get(\"mainEventNameUpdated\") + pm.variables.get(\"timeStamp\")));\r",
									"        pm.expect(jsonData[0].ticketType).to.equal((\"new\" + pm.variables.get(\"ticketTypeName\") + pm.variables.get(\"timeStamp\")));\r",
									"\r",
									"        }\r",
									");\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{apiUrl}}/tickets/userticketsupcoming",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"tickets",
								"userticketsupcoming"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete ticket",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\",\r",
									"    function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    }\r",
									");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json-patch+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": {{ticketId}}\r\n}"
						},
						"url": {
							"raw": "{{apiUrl}}/tickets",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"tickets"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User Happy Path Scenarios",
			"item": [
				{
					"name": "Get all users of the specific event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\",\r",
									"    function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    }\r",
									");\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"var ticketType = _.find(pm.response.json(), { \r",
									"    id: pm.variables.get(\"currentUserId\"),\r",
									"    firstName: pm.variables.get(\"Post\"),\r",
									"    lastName: pm.variables.get(\"Man\")\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{apiUrl}}/users/participantslist",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"users",
								"participantslist"
							]
						}
					},
					"response": []
				},
				{
					"name": "Registrer new user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\",\r",
									"    function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    }\r",
									");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json-patch+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"firstName\": \"{{newUserFirstName}}\",\r\n  \"middleName\": \"{{newUserMiddleName}}\",\r\n  \"lastName\": \"{{newUserLastName}}\",\r\n  \"phoneNumber\": \"{{newUserPhoneNumber}}\",\r\n  \"address\": \"{{newUserAddresse}}\",\r\n  \"zipCode\": \"{{newUserZipCode}}\",\r\n  \"eMail\": \"{{newUserEmail}}{{timeStamp}}\",\r\n  \"userName\": \"{{newUserName}}{{timeStamp}}\",\r\n  \"dateOfBirth\": \"2021-05-23T13:09:37.422Z\",\r\n  \"gender\": \"Jente\",\r\n  \"isAllergic\": true,\r\n  \"allergyDescription\": \"Sitrusfrukt\",\r\n  \"password\": \"{{newUserPassword}}{{timeStamp}}\",\r\n  \"passwordCheck\": \"{{newUserPassword}}{{timeStamp}}\"\r\n}"
						},
						"url": {
							"raw": "{{apiUrl}}/users/register",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"users",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\",\r",
									"    function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    }\r",
									");\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"var user = _.find(pm.response.json(), { \r",
									"    userName: pm.variables.get(\"newUserName\") + pm.variables.get(\"timeStamp\")\r",
									"});\r",
									"pm.environment.set(\"newUserId\", user.id);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{apiUrl}}/users/userslist",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"users",
								"userslist"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\",\r",
									"    function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    }\r",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json-patch+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"firstName\": \"Post\",\r\n  \"lastName\": \"Mansen\",\r\n  \"phoneNumber\": \"95258963\",\r\n  \"address\": \"Oslogaten 13\",\r\n  \"zipCode\": \"0258\",\r\n  \"gender\": \"Gutt\"\r\n}\r\n"
						},
						"url": {
							"raw": "{{apiUrl}}/users/updateuser",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"users",
								"updateuser"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\",\r",
									"    function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    }\r",
									");\r",
									"\r",
									"pm.test(\r",
									"    \"Last name has been updated\",\r",
									"    function () {\r",
									"        var jsonData = JSON.parse(responseBody);\r",
									"        pm.expect(jsonData.lastName).to.equal(\"Mansen\");\r",
									"    }\r",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{apiUrl}}/users/user/{{currentUserId}}",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"users",
								"user",
								"{{currentUserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\",\r",
									"    function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    }\r",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json-patch+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\":\"postmanwarpweb1@gmail.com\"\r\n}"
						},
						"url": {
							"raw": "{{apiUrl}}/users/updateusername",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"users",
								"updateusername"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user again",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\",\r",
									"    function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    }\r",
									");\r",
									"\r",
									"pm.test(\r",
									"    \"Last name has been updated\",\r",
									"    function () {\r",
									"        var jsonData = JSON.parse(responseBody);\r",
									"        pm.expect(jsonData.userName).to.equal(\"postmanwarpweb1@gmail.com\");\r",
									"    }\r",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{apiUrl}}/users/user/{{currentUserId}}",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"users",
								"user",
								"{{currentUserId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update username again",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\",\r",
									"    function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    }\r",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json-patch+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\":\"postmanwarpweb@gmail.com\"\r\n}"
						},
						"url": {
							"raw": "{{apiUrl}}/users/updateusername",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"users",
								"updateusername"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check if username exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\",\r",
									"    function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    }\r",
									");\r",
									"\r",
									"pm.test(\r",
									"    \"User name exists\",\r",
									"    function () {\r",
									"        var jsonData = JSON.parse(responseBody);\r",
									"        pm.expect(jsonData.isUnavailable).to.equal(true);\r",
									"    }\r",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{apiUrl}}/users/checkusername/{{newUserName}}{{timeStamp}}",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"users",
								"checkusername",
								"{{newUserName}}{{timeStamp}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check if email exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\",\r",
									"    function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    }\r",
									");\r",
									"\r",
									"pm.test(\r",
									"    \"Email name exists\",\r",
									"    function () {\r",
									"        var jsonData = JSON.parse(responseBody);\r",
									"        pm.expect(jsonData.isUnavailable).to.equal(true);\r",
									"    }\r",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{apiUrl}}/users/checkemail/{{newUserEmail}}{{timeStamp}}",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"users",
								"checkemail",
								"{{newUserEmail}}{{timeStamp}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\",\r",
									"    function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    }\r",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json-patch+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"eMail\": \"user@example.com\"\r\n}"
						},
						"url": {
							"raw": "{{apiUrl}}/users/updateemail",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"users",
								"updateemail"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\",\r",
									"    function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    }\r",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json-patch+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"oldPassword\": \"SuperHemmelig\",\r\n  \"newPassword\": \"SuperHemmeligSuperHemmelig\",\r\n  \"checkNewPassword\": \"SuperHemmeligSuperHemmelig\"\r\n}"
						},
						"url": {
							"raw": "{{apiUrl}}/users/updatepassword",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"users",
								"updatepassword"
							]
						}
					},
					"response": []
				},
				{
					"name": "Auth with new password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\",\r",
									"    function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    }\r",
									");\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"token\", \"Bearer \" + jsonData.token);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "content-type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userName\": \"postmanwarpweb@gmail.com\",\r\n    \"password\": \"SuperHemmeligSuperHemmelig\"\r\n}\r\n"
						},
						"url": {
							"raw": "{{apiUrl}}/auth/login",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update password again",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\",\r",
									"    function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    }\r",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json-patch+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"oldPassword\": \"SuperHemmeligSuperHemmelig\",\r\n  \"newPassword\": \"SuperHemmelig\",\r\n  \"checkNewPassword\": \"SuperHemmelig\"\r\n}"
						},
						"url": {
							"raw": "{{apiUrl}}/users/updatepassword",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"users",
								"updatepassword"
							]
						}
					},
					"response": []
				},
				{
					"name": "Auth with new password again",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\",\r",
									"    function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    }\r",
									");\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"token\", \"Bearer \" + jsonData.token);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "content-type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userName\": \"postmanwarpweb@gmail.com\",\r\n    \"password\": \"SuperHemmelig\"\r\n}\r\n"
						},
						"url": {
							"raw": "{{apiUrl}}/auth/login",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Security Happy Path Scenarios",
			"item": [
				{
					"name": "Get list of permissions for current user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\",\r",
									"    function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    }\r",
									");\r",
									"\r",
									"pm.test(\r",
									"    \"User has all rights\",\r",
									"    function () {\r",
									"        var jsonData = JSON.parse(responseBody);\r",
									"        pm.expect(jsonData[0]).to.equal(0);\r",
									"        pm.expect(jsonData[1]).to.equal(1);\r",
									"        pm.expect(jsonData[2]).to.equal(2);\r",
									"        pm.expect(jsonData[3]).to.equal(3);\r",
									"        pm.expect(jsonData[4]).to.equal(4);\r",
									"        pm.expect(jsonData[5]).to.equal(5);\r",
									"        pm.expect(jsonData[6]).to.equal(6);\r",
									"        pm.expect(jsonData[7]).to.equal(7);\r",
									"        }\r",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{apiUrl}}/security/policies",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"security",
								"policies"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update users email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\",\r",
									"    function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    }\r",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json-patch+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userId\": \"{{newUserId}}\",\r\n  \"newEMail\": \"email@test.no\"\r\n}"
						},
						"url": {
							"raw": "{{apiUrl}}/security/edituseremail",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"security",
								"edituseremail"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Reports Happy Path Scenarios",
			"item": [
				{
					"name": "Get count of ticket types",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\",\r",
									"    function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    }\r",
									");\r",
									"\r",
									"pm.test(\r",
									"    \"Array of ticket types for the current event\",\r",
									"    function () {\r",
									"         var ticket = _.find(pm.response.json(), { \r",
									"            descriptionName: \"new\" + pm.variables.get(\"ticketTypeName\")+ pm.variables.get(\"timeStamp\")\r",
									"        });\r",
									"            pm.expect(ticket).exist;\r",
									"\r",
									"        }\r",
									");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{apiUrl}}/reports/tickettypesreport",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"reports",
								"tickettypesreport"
							]
						}
					},
					"response": []
				},
				{
					"name": "Auth with the second user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\",\r",
									"    function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    }\r",
									");\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"token\", \"Bearer \" + jsonData.token);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "content-type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userName\": \"{{newUserName}}{{timeStamp}}\",\r\n    \"password\": \"{{newUserPassword}}{{timeStamp}}\"\r\n}\r\n"
						},
						"url": {
							"raw": "{{apiUrl}}/auth/login",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Set current main event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\",\r",
									"    function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    }\r",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json-patch+json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{mainEventId}}"
						},
						"url": {
							"raw": "{{apiUrl}}/events/setcurrentevent",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"events",
								"setcurrentevent"
							]
						}
					},
					"response": []
				},
				{
					"name": "Refresh token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\",\r",
									"    function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    }\r",
									");\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"token\", \"Bearer \" + jsonData.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{apiUrl}}/auth/refreshtoken",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"auth",
								"refreshtoken"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get count of users with allergies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\",\r",
									"    function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    }\r",
									");\r",
									"\r",
									"pm.test(\r",
									"    \"There is a user with allergies\",\r",
									"    function () {\r",
									"        var user = _.find(pm.response.json(), { \r",
									"            id: pm.variables.get(\"newUserId\")\r",
									"        });\r",
									"        pm.expect(user).exist;\r",
									"    }\r",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{apiUrl}}/reports/allergiesreport",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"reports",
								"allergiesreport"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get count of different genders across participants",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\",\r",
									"    function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    }\r",
									");\r",
									"\r",
									"pm.test(\r",
									"    \"THere are one male and one female participants\",\r",
									"    function () {\r",
									"        var jsonData = JSON.parse(responseBody);\r",
									"        pm.expect(jsonData.maleAmount).to.equal(1);\r",
									"        pm.expect(jsonData.femaleAmount).to.equal(1);\r",
									"        pm.expect(jsonData.otherAmount).to.equal(0);\r",
									"        pm.expect(jsonData.notDisclosedAmount).to.equal(0);\r",
									"    }\r",
									");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{apiUrl}}/reports/participantsgenderreport",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"reports",
								"participantsgenderreport"
							]
						}
					},
					"response": []
				},
				{
					"name": "Auth with Postman",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\r",
									"    \"Status code is 200\",\r",
									"    function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    }\r",
									");\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"token\", \"Bearer \" + jsonData.token);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "content-type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userName\": \"postmanwarpweb@gmail.com\",\r\n    \"password\": \"SuperHemmelig\"\r\n}\r\n\r\n"
						},
						"url": {
							"raw": "{{apiUrl}}/auth/login",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://localhost:44308"
		},
		{
			"key": "apiUrl",
			"value": "{{baseUrl}}/api"
		},
		{
			"key": "timeStamp",
			"value": ""
		},
		{
			"key": "mainEventName",
			"value": "NewMainEventFromPostman"
		},
		{
			"key": "mainEventNameUpdated",
			"value": "UpdatedMainEventName"
		},
		{
			"key": "organizerName",
			"value": "NewOrganizerNameFromPostman"
		},
		{
			"key": "organizerNameUpdated",
			"value": "UpdatedOrganizerName"
		},
		{
			"key": "venueName",
			"value": "NewVenueNameFromPostman"
		},
		{
			"key": "crewName",
			"value": "NewCrewFromPostman"
		},
		{
			"key": "crewNameUpdated",
			"value": "UpdatedCrewFromPostman"
		},
		{
			"key": "venueNameUpdated",
			"value": "UpdatedVenueName"
		},
		{
			"key": "ticketTypeName",
			"value": "NewTicketTypeFromPostman"
		},
		{
			"key": "ticketTypeNameUpdated",
			"value": "UpdatedTicketTypeName"
		},
		{
			"key": "ticketTypePrice",
			"value": "50"
		},
		{
			"key": "ticketTypeAmmountAvailable",
			"value": "150"
		},
		{
			"key": "rowName",
			"value": "NewRowFromPostman"
		},
		{
			"key": "numberOfSeats",
			"value": "20"
		},
		{
			"key": "ticketName",
			"value": "NewTicketFromPostman"
		},
		{
			"key": "newUserFirstName",
			"value": "Line"
		},
		{
			"key": "newUserMiddleName",
			"value": "Anna"
		},
		{
			"key": "newUserLastName",
			"value": "Evensen"
		},
		{
			"key": "newUserPhoneNumber",
			"value": "98525693"
		},
		{
			"key": "newUserAddresse",
			"value": "Postmanveien 31"
		},
		{
			"key": "newUserZipCode",
			"value": "0525"
		},
		{
			"key": "newUserEmail",
			"value": "user@test.no"
		},
		{
			"key": "newUserName",
			"value": "UserNameFromPostman"
		},
		{
			"key": "newUserPassword",
			"value": "PasswordPassword"
		}
	]
}